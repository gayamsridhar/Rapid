const { expect } = require("chai");
const { ethers } = require("hardhat");

let adminUser, userOne, userTwo;
let euro, euroToken;
let inr,inrToken;
let rapid, rapidContract
let euroLP32 = "0x424e443500000000000000000000000000000000000000000000000000000000";
let inrLP32 = "0x4555525300000000000000000000000000000000000000000000000000000000";

describe("Rapid Protocol", function () {
  beforeEach(async function () {
    [adminUser,  userOne, userTwo] = await ethers.getSigners();

    euro = await ethers.getContractFactory("TokenisedFiat");
    euroToken = await euro.deploy("Euro Liquidity Pool Token","ELP");
    await euroToken.deployed();

    inr = await ethers.getContractFactory("TokenisedFiat");
    inrToken = await inr.deploy("Rupee Liquidity Pool Token","ILP");
    await inrToken.deployed();

    rapid = await ethers.getContractFactory("RapidProtocol");
    rapidContract = await rapid.deploy();
    await rapidContract.deployed();

    // add LP tokesn to pool registry 

    await rapidContract.addToken(euroLP32, euroToken.address);
    await rapidContract.addToken(inrLP32, inrToken.address);

  });

  it("Token Addresses", async function () {
    console.log("--------------------------");
    console.log("Owner of the the all contracts: ", adminUser.address);
    console.log("Address of the the Euro Liquidity Pool Token contract: ", euroToken.address);
    console.log("Address of the the Rupee Liquidity Pool Token contract: ", inrToken.address);
    console.log("");

    const euroTokenName = await euroToken.name();
    console.log("name of Euro Liquidity Pool Token contract: ", euroTokenName);

    const euroTokenSymbol = await euroToken.symbol();
    console.log("symbol of Euro Liquidity Pool Token contract: ", euroTokenSymbol);

    console.log("");

    const inrTokenName = await inrToken.name();
    console.log("name of Rupee Liquidity Pool Token contract: ", inrTokenName);

    const inrTokenSymbol = await inrToken.symbol();
    console.log("symbol of Rupee Liquidity Pool Token contract: ", inrTokenSymbol);

    console.log("--------------------------");
  }); 

  it("get tokens", async function () {
    console.log("--------------------------");

    const registeredTokens = await rapidContract.getTokens();
    // console.log("registered tokens with rapid protocol",  registeredTokens);

   for (let i = 0 ; i <  registeredTokens.length; i++) {
     console.log("registered token address with rapid protocol # ", +i+1 + " : " +  registeredTokens[i].tokenAddress);
     console.log("registered token symbol rapid protocol # ", +i+1 + " : " +  registeredTokens[i].sybmol);
    }
    console.log("--------------------------");
  });

  it("buy tokens", async function () {
    console.log("--------------------------");

    await rapidContract.buyLiquidityPoolTokens(1000,userOne.address,euroLP32);
    const balanceOne = await euroToken.balanceOf(userOne.address);
    console.log("balance of user one(Euro Tokens)",  balanceOne.toNumber());

    await rapidContract.buyLiquidityPoolTokens(100000,userTwo.address,inrLP32);
    const balanceTwo = await inrToken.balanceOf(userTwo.address);
    console.log("balance of user two(Rupee Tokens)",  balanceTwo.toNumber());

    console.log("--------------------------");
  });

  it("get pool balance", async function () {
    console.log("--------------------------");

    await rapidContract.buyLiquidityPoolTokens(1000,userOne.address,euroLP32);
    await rapidContract.buyLiquidityPoolTokens(100000,userTwo.address,inrLP32);

    const inrPB = await rapidContract.getPoolBalance(inrLP32);
    const euroPB = await rapidContract.getPoolBalance(euroLP32);

    console.log("inr pool balance(Rupee Tokens)",  inrPB.toNumber());
    console.log("euro pool balance(Euro Tokens)",  euroPB.toNumber());

    console.log("--------------------------");
  });

  it("tranfer from euro to inr", async function () {
    console.log("--------------------------");

    await rapidContract.buyLiquidityPoolTokens(1000,userOne.address,euroLP32);
    await rapidContract.buyLiquidityPoolTokens(100000,userTwo.address,inrLP32);

    let inrPB = await rapidContract.getPoolBalance(inrLP32);
    let euroPB = await rapidContract.getPoolBalance(euroLP32);

    console.log("before transfer : inr pool balance(Rupee Tokens)",  inrPB.toNumber());
    console.log("before transfer : euro pool balance(Euro Tokens)",  euroPB.toNumber());

    await rapidContract.transfer(euroLP32,inrLP32,80);

    inrPB = await rapidContract.getPoolBalance(inrLP32);
    euroPB = await rapidContract.getPoolBalance(euroLP32);

    console.log("after transfer : inr pool balance(Rupee Tokens)",  inrPB.toNumber());
    console.log("after transfer : euro pool balance(Euro Tokens)",  euroPB.toNumber());

    console.log("--------------------------");
  });

  it("burn tokens", async function () {
    console.log("--------------------------");

    await rapidContract.buyLiquidityPoolTokens(1000,userOne.address,euroLP32);
    let balanceOne = await euroToken.balanceOf(userOne.address);
    console.log("balance of user one(Euro Tokens)",  balanceOne.toNumber());

    await rapidContract.buyLiquidityPoolTokens(100000,userTwo.address,inrLP32);
    let balanceTwo = await inrToken.balanceOf(userTwo.address);
    console.log("balance of user two(Rupee Tokens)",  balanceTwo.toNumber());

    let inrPB = await rapidContract.getPoolBalance(inrLP32);
    let euroPB = await rapidContract.getPoolBalance(euroLP32);

    console.log("before burn : inr pool balance(Rupee Tokens)",  inrPB.toNumber());
    console.log("before burn : euro pool balance(Euro Tokens)",  euroPB.toNumber());

    await rapidContract.burnLiquidityPoolTokens(100,userOne.address,euroLP32);
    balanceOne = await euroToken.balanceOf(userOne.address);
    console.log("balance of user one(Euro Tokens)",  balanceOne.toNumber());

    await rapidContract.burnLiquidityPoolTokens(1000,userTwo.address,inrLP32);
    balanceTwo = await inrToken.balanceOf(userTwo.address);
    console.log("balance of user two(Rupee Tokens)",  balanceTwo.toNumber());

    inrPB = await rapidContract.getPoolBalance(inrLP32);
    euroPB = await rapidContract.getPoolBalance(euroLP32);

    console.log("after burn : inr pool balance(Rupee Tokens)",  inrPB.toNumber());
    console.log("after burn : euro pool balance(Euro Tokens)",  euroPB.toNumber());

    console.log("--------------------------");
  });

  it("pool balance and pool token balance", async function () {
    console.log("--------------------------");

    await rapidContract.buyLiquidityPoolTokens(1000,userOne.address,euroLP32);
    await rapidContract.buyLiquidityPoolTokens(100000,userTwo.address,inrLP32);

    let inrPB = await rapidContract.getPoolBalance(inrLP32);
    let euroPB = await rapidContract.getPoolBalance(euroLP32);

    let inrPTB = await rapidContract.getPoolTokenBalance(inrLP32);
    let euroPTB = await rapidContract.getPoolTokenBalance(euroLP32);

    console.log("before transfer : inr pool balance(Rupee Tokens)",  inrPB.toNumber());
    console.log("before transfer : euro pool balance(Euro Tokens)",  euroPB.toNumber());

    console.log("before transfer : inr pool token balance(Rupee Tokens)",  inrPTB.toNumber());
    console.log("before transfer : euro pool token balance(Euro Tokens)",  euroPTB.toNumber());

    await rapidContract.transfer(euroLP32,inrLP32,80);

    inrPB = await rapidContract.getPoolBalance(inrLP32);
    euroPB = await rapidContract.getPoolBalance(euroLP32);

    inrPTB = await rapidContract.getPoolTokenBalance(inrLP32);
    euroPTB = await rapidContract.getPoolTokenBalance(euroLP32);

    console.log("after transfer : inr pool balance(Rupee Tokens)",  inrPB.toNumber());
    console.log("after transfer : euro pool balance(Euro Tokens)",  euroPB.toNumber());

    console.log("after transfer : inr pool token balance(Rupee Tokens)",  inrPTB.toNumber());
    console.log("after transfer : euro pool token balance(Euro Tokens)",  euroPTB.toNumber());

    console.log("--------------------------");
  });

});
